package gui;

import java.net.URL;
import java.util.List;
import java.util.ResourceBundle;

import application.Main;
import gui.listeners.DataChangeListener;
import gui.util.Alerts;
import gui.util.utils;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import model.entities.Departamento;
import model.services.DepartamentoService;

public class DepartamentoListaControler implements Initializable, DataChangeListener {

	private DepartamentoService service;
	private ObservableList<Departamento> obslista;
	private Departamento dep;	
	
	public void setDepartamentoService(DepartamentoService service) {
		this.service = service;		
	}
		
	@FXML
	private TableView<Departamento> TableViewDepartamento;
	
	@FXML
	private TableColumn<Departamento, Integer> colId;
	
	@FXML
	private TableColumn<Departamento, String> colDepartamento;
	
	@FXML
	private Button BtNovo;
	
	@FXML
	private Button btEditar;
	
	@FXML
	private void onBtNovoAction(ActionEvent event) {
		dep = new Departamento();
		Stage parentStage = utils.currentStage(event);				
		CreateDialogForm("/gui/DepartamentoForm.fxml", parentStage, dep );
		//updateTableView(); rele todos os dados
	}
	
	@FXML
	private void onbtEditarAction(ActionEvent event) {
		dep = new Departamento();
		//dep.setId(Integer.parseInt(colId.getText()));
		//dep.setNome(colDepartamento.getText());
		Stage parentStage = utils.currentStage(event);		
		CreateDialogForm("/gui/DepartamentoForm.fxml", parentStage, dep );				
	}
	
	@FXML
	private void onTableViewDepartamentoAction() {
				
		System.out.println(TableViewDepartamento.getSelectionModel().getSelectedItem().getId());
		dep.setNome(TableViewDepartamento.getSelectionModel().getSelectedItem().getNome());
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		InitializeNodes();				
	}
	
	private void InitializeNodes() {
		colId.setCellValueFactory(new PropertyValueFactory<>("id"));
		colDepartamento.setCellValueFactory(new PropertyValueFactory<>("nome"));
		//Stage stage = (Stage) Main.getMainScene().getWindow();
		//TableViewDepartamento.prefHeightProperty().bind(stage.heightProperty());	// Instrutor
		//TableViewDepartamento.prefHeightProperty().setValue(stage.getHeight());	//EU
		TableViewDepartamento.setPrefHeight(Main.getMainScene().getHeight());		//Eu		
	}
	
	public void updateTableView() {
		if(service == null) {
			throw new IllegalStateException("Service n√£o encontrado");
		}
		List<Departamento> list = service.findAll();
		obslista = FXCollections.observableArrayList(list);
		TableViewDepartamento.setItems(obslista);
	}
	
	private void CreateDialogForm(String fxmlnome, Stage oldStage, Departamento dep) {
		try {
			FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlnome));			
			Pane pane = loader.load();
			
			DepartamentoFormControler controler = loader.getController();			
			controler.setDepartamento(dep);
			controler.setDepartamentoService(new DepartamentoService());
			controler.subscribeDataChangeListener(this);
			controler.updateFormData();
			
			Stage dialogStage = new Stage();
			dialogStage.setTitle("Cadastrar novo departamento");			
			dialogStage.setScene(new Scene(pane));
			dialogStage.setResizable(false);
			dialogStage.initOwner(oldStage);			
			dialogStage.showAndWait();
			
		} catch (Exception e) {
			Alerts.showAlert("Erro de IO", "Erro de leitura", e.getMessage(), Alert.AlertType.ERROR);
		}		
	}
	
	@Override
	public void onDataChanged() {
		updateTableView();		
	}


}
