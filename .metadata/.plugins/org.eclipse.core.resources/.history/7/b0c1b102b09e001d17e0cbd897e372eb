package gui;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Set;

import db.DbException;
import gui.listeners.DataChangeListener;
import gui.util.Alerts;
import gui.util.Constraints;
import gui.util.utils;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import model.entities.Vendedor;
import model.exception.ValidateException;
import model.services.VendedorService;

public class VendedorFormControler implements Initializable {

	private Vendedor dep;
	private VendedorService service;
	private List<DataChangeListener> dataChangeListeners = new ArrayList<>();

	@FXML
	private TextField txtId;
	@FXML
	private TextField txtNome;
	
	@FXML
	private TextField txtEmail;
	
	@FXML
	private DatePicker dpBirthDate;

	@FXML
	private TextField txtBaseSalary;

	@FXML
	private Button btSalvar;
	@FXML
	private Button btCancelar;
	@FXML
	private Label lblErrorName;
	@FXML
	private Label lblErrorEmail;
	@FXML
	private Label lblErrorBirthDate;
	@FXML
	private Label lblErrorBaseSalary;
	
	public void setVendedor(Vendedor dp) {
		this.dep = dp;
	}

	public void setVendedorService(VendedorService service) {
		this.service = service;
	}

	public void subscribeDataChangeListener(DataChangeListener listener) {
		dataChangeListeners.add(listener);
	}

	public void onbtSalvarAction(ActionEvent event) {
		try {			
			service.saveOrUpdate(getFormData());
			notifyDataChangeListeners();
			utils.currentStage(event).close(); // Fecha a janela de entrada de dados
		} catch (ValidateException e) {
			setErrorMensagem(e.getErros());
		} catch (DbException e) {
			Alerts.showAlert("Erro ao salvar Vendedor", null, e.getMessage(), Alert.AlertType.ERROR);
		}
	}

	private void notifyDataChangeListeners() {
		for (DataChangeListener listener : dataChangeListeners) {
			listener.onDataChanged();
		}

	}

	public void onbtCancelarAction(ActionEvent event) {
		utils.currentStage(event).close(); // Fecha a janela de entrada de dados
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		Constraints.setTextFieldMaxLength(txtNome, 30);
		Constraints.setTextFieldDouble(txtBaseSalary);		
	}

	private Vendedor getFormData() {

		ValidateException exception = new ValidateException("Erro de Validação");

		if (txtNome.getText() == null || txtNome.getText().trim().equals("")) {
			exception.addError("nome", "Favor preencher nome do departamemnto");
		}
		if (exception.getErros().size() > 0) {
			throw exception;
		}
		dep.setNome(txtNome.getText());
		return dep;
	}

	public void updateFormData() {

		if (dep.getId() != null) {
			txtId.setText(String.valueOf(dep.getId()));
		}
		txtNome.setText(dep.getNome());
	}

	private void setErrorMensagem(Map<String, String> errors) {
		Set<String> fields = errors.keySet();
		if (fields.contains("nome")) {
			lblErrorName.setText(errors.get("nome"));
		}
	}

}
